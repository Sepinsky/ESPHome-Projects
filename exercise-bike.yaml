esphome:
  name: exercise-bike
  friendly_name: Exercise Bike

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret lego-controller-api-key

ota:
  password: !secret lego-controller-ota-pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Exercise-Bike Fallback Hotspot"
    password: !secret lego-controller-ap-pass

captive_portal:
    
output:
  - platform: ledc
    pin: GPIO22
    id: motor1_fw
    # when using a 9v PS this limits output to 5v to protect motor
    max_power: 0.55
  
  - platform: ledc
    pin: GPIO23
    id: motor1_rv
    # when using a 9v PS this limits output to 5v to protect motor
    max_power: 0.55

light:
  - platform: monochromatic
#    name: "Resistance Motor FW"
    id: motor_fw
    output: motor1_fw
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF

  - platform: monochromatic
#    name: "Resistance Motor RV"
    id: motor_rv
    output: motor1_rv
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF

sensor:
  - platform: adc
    pin: GPIO36
    id: resistance_raw
    update_interval: 5ms
    attenuation: auto
    accuracy_decimals: 3
    filters:
      - exponential_moving_average:
          alpha: 0.05
          send_every: 10
          send_first_at: 10

  - platform: template
    name: Resistance Level
    id: res_level
    update_interval: 50ms
    accuracy_decimals: 0
    lambda: |-
      if (id(res_27).state) {
        return 27;
      } else if (id(res_26).state) {
        return 26;
      } else if (id(res_25).state) {
        return 25;
      } else if (id(res_24).state) {
        return 24;
      } else if (id(res_23).state) {
        return 23;
      } else if (id(res_22).state) {
        return 22;
      } else if (id(res_21).state) {
        return 21;
      } else if (id(res_20).state) {
        return 20;
      } else if (id(res_19).state) {
        return 19;
      } else if (id(res_18).state) {
        return 18;
      } else if (id(res_17).state) {
        return 17;
      } else if (id(res_16).state) {
        return 16;
      } else if (id(res_15).state) {
        return 15;
      } else if (id(res_14).state) {
        return 14;
      } else if (id(res_13).state) {
        return 13;
      } else if (id(res_12).state) {
        return 12;
      } else if (id(res_11).state) {
        return 11;
      } else if (id(res_10).state) {
        return 10;
      } else if (id(res_9).state) {
        return 9;
      } else if (id(res_8).state) {
        return 8;
      } else if (id(res_7).state) {
        return 7;
      } else if (id(res_6).state) {
        return 6;
      } else if (id(res_5).state) {
        return 5;
      } else if (id(res_4).state) {
        return 4;
      } else if (id(res_3).state) {
        return 3;
      } else if (id(res_2).state) {
        return 2;
      } else if (id(res_1).state) {
        return 1;
      } else if (id(res_0).state) {
        return 0;
      } else {
        return 0;
      }

  - platform: pulse_meter
    name: 'Cadence'
    unit_of_measurement: 'RPM'
    state_class: measurement
    accuracy_decimals: 0
    timeout: 30s
    internal_filter: 10ms
    pin:
      number: GPIO27
      mode:
        input: True
        pullup: True
      inverted: True
    filters:
      - multiply: 0.5
      - clamp:
          min_value: 0
          max_value: 200
          ignore_out_of_range: true

binary_sensor:
  - platform: analog_threshold
#    name: "Resistance 0"
    id: res_0
    sensor_id: resistance_raw
    threshold: 0

  - platform: analog_threshold
#    name: "Resistance 1"
    id: res_1
    sensor_id: resistance_raw
    threshold: 0.15
  
  - platform: analog_threshold
#    name: "Resistance 2"
    id: res_2
    sensor_id: resistance_raw
    threshold: 0.26

  - platform: analog_threshold
#    name: "Resistance 3"
    id: res_3
    sensor_id: resistance_raw
    threshold: 0.37

  - platform: analog_threshold
#    name: "Resistance 4"
    id: res_4
    sensor_id: resistance_raw
    threshold: 0.48

  - platform: analog_threshold
#    name: "Resistance 5"
    id: res_5
    sensor_id: resistance_raw
    threshold: 0.59

  - platform: analog_threshold
#    name: "Resistance 6"
    id: res_6
    sensor_id: resistance_raw
    threshold: 0.70

  - platform: analog_threshold
#    name: "Resistance 7"
    id: res_7
    sensor_id: resistance_raw
    threshold: 0.81

  - platform: analog_threshold
#    name: "Resistance 8"
    id: res_8
    sensor_id: resistance_raw
    threshold: 0.92

  - platform: analog_threshold
#    name: "Resistance 9"
    id: res_9
    sensor_id: resistance_raw
    threshold: 1.03

  - platform: analog_threshold
#    name: "Resistance 10"
    id: res_10
    sensor_id: resistance_raw
    threshold: 1.14

  - platform: analog_threshold
#    name: "Resistance 11"
    id: res_11
    sensor_id: resistance_raw
    threshold: 1.25

  - platform: analog_threshold
#    name: "Resistance 12"
    id: res_12
    sensor_id: resistance_raw
    threshold: 1.36

  - platform: analog_threshold
#    name: "Resistance 13"
    id: res_13
    sensor_id: resistance_raw
    threshold: 1.47

  - platform: analog_threshold
#    name: "Resistance 14"
    id: res_14
    sensor_id: resistance_raw
    threshold: 1.58

  - platform: analog_threshold
#    name: "Resistance 15"
    id: res_15
    sensor_id: resistance_raw
    threshold: 1.69

  - platform: analog_threshold
#    name: "Resistance 16"
    id: res_16
    sensor_id: resistance_raw
    threshold: 1.80

  - platform: analog_threshold
#    name: "Resistance 17"
    id: res_17
    sensor_id: resistance_raw
    threshold: 1.91

  - platform: analog_threshold
#    name: "Resistance 18"
    id: res_18
    sensor_id: resistance_raw
    threshold: 2.02

  - platform: analog_threshold
#    name: "Resistance 19"
    id: res_19
    sensor_id: resistance_raw
    threshold: 2.13

  - platform: analog_threshold
#    name: "Resistance 20"
    id: res_20
    sensor_id: resistance_raw
    threshold: 2.24

  - platform: analog_threshold
#    name: "Resistance 21"
    id: res_21
    sensor_id: resistance_raw
    threshold: 2.35

  - platform: analog_threshold
#    name: "Resistance 22"
    id: res_22
    sensor_id: resistance_raw
    threshold: 2.46

  - platform: analog_threshold
#    name: "Resistance 23"
    id: res_23
    sensor_id: resistance_raw
    threshold: 2.57

  - platform: analog_threshold
#    name: "Resistance 24"
    id: res_24
    sensor_id: resistance_raw
    threshold: 2.68

  - platform: analog_threshold
#    name: "Resistance 25"
    id: res_25
    sensor_id: resistance_raw
    threshold: 2.79

  - platform: analog_threshold
#    name: "Resistance 26"
    id: res_26
    sensor_id: resistance_raw
    threshold: 2.90

  - platform: analog_threshold
#    name: "Resistance 27"
    id: res_27
    sensor_id: resistance_raw
    threshold: 3.01

number:
  - platform: template
    name: "Pedal Resistance"
    min_value: 1
    max_value: 27
    step: 1
    update_interval: 500ms
    lambda: 'return (id(res_level).state);'
    set_action:
      if:
          condition:
            lambda: 'return ((id(res_level).state) > x);'
          then:
            - light.turn_on: motor_rv
            - wait_until:
                lambda: 'return ((id(res_level).state) <= x);'
            - light.turn_off: motor_rv
          else:
            if:
              condition:
                lambda: 'return ((id(res_level).state) < x);'
              then:
                - light.turn_on: motor_fw
                - wait_until:
                    lambda: 'return ((id(res_level).state) >= x);'
                - light.turn_off: motor_fw
