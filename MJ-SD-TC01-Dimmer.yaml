substitutions:
  device_name: dining-room-dimmer
  friendly_name: Dining Room Dimmer
  min_brightness: '50'
  
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0
  
# Enable Home Assistant API
api:
  encryption:
    key: !secret api-key

ota:
  password: !secret ota-pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: !secret ap-pass

captive_portal:

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600

tuya:

script:
  - id: sync_hack
    mode: single
    parameters:
      was_phy: int
    then:
      - logger.log: "in script"
      - if:
          condition:
            - lambda: 'return was_phy == 1;'
          then:
            - logger.log: "was_phy was 1"
            - light.toggle: internal_dimmer
          else:
            - logger.log: "was_phy was 0"
            - light.toggle: tuya_dimmer
      - delay: 1s

light:
  - platform: "tuya"
#    name: "dim1"
    id: tuya_dimmer
    dimmer_datapoint: 2
    min_value: ${min_brightness}
    switch_datapoint: 1
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - logger.log: "starting on_turn_off from tuya"
      - if:
          condition:
            - lambda: 'return (id(tuya_dimmer).current_values.get_brightness()) != (id(internal_dimmer).current_values.get_brightness());'
          then:
            - light.control:
                id: internal_dimmer
                brightness: !lambda return id(tuya_dimmer).current_values.get_brightness();
          else:
            - script.execute:
                id: sync_hack
                was_phy: 1
    on_state:
      - logger.log: "starting on_state from tuya"
      - logger.log:
          format: "Tuya setting %.2f Internal setting %.2f from Tuya control"
          args: [ 'id(tuya_dimmer).current_values.get_brightness()' , 'id(internal_dimmer).current_values.get_brightness()' ]
      - if:
          condition:
            - lambda: 'return ((id(tuya_dimmer).current_values.get_brightness()) != (id(internal_dimmer).current_values.get_brightness())) && (id(internal_dimmer).current_values.is_on());'
          then:
            - light.control:
                id: internal_dimmer
                brightness: !lambda return id(tuya_dimmer).current_values.get_brightness();

  - platform: monochromatic
    name: ${friendly_name}
    id: internal_dimmer
    output: light_output
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF
    on_state:
      - logger.log: "starting on_state from internal"
      - logger.log:
          format: "Tuya setting %.2f Internal setting %.2f from internal control"
          args: [ 'id(tuya_dimmer).current_values.get_brightness()' , 'id(internal_dimmer).current_values.get_brightness()' ]
      - if:
          condition:
            - lambda: 'return (id(tuya_dimmer).current_values.get_brightness()) != (id(internal_dimmer).current_values.get_brightness());'
          then:
            - light.control:
                id: tuya_dimmer
                brightness: !lambda return id(internal_dimmer).current_values.get_brightness();
    on_turn_on:
      - logger.log: "starting on_turn_on from internal"
      - if:
          condition:
            - lambda: 'return (id(tuya_dimmer).current_values.get_brightness()) != (id(internal_dimmer).current_values.get_brightness());'
          then:
            - light.control:
                id: tuya_dimmer
                brightness: !lambda return id(internal_dimmer).current_values.get_brightness();
      - logger.log: "starting script from internal on_turn_on"
      - script.execute:
          id: sync_hack
          was_phy: 0
    on_turn_off:
      - logger.log: "starting on_turn_off from internal"
      - logger.log: "starting script from internal on_turn_off"
      - script.execute:
          id: sync_hack
          was_phy: 0

output:
  - platform: template
    id: light_output
    type: float
    write_action:
      - logger.log: "Dummy output"
      - logger.log:
          format: "internal dimmer setting in output is %.2f"
          args: [ 'id(internal_dimmer).current_values.get_brightness()' ]

button:
  - platform: restart
    id: restart_button
    name: Restart
    entity_category: diagnostic


# potential alternate method
# create 4 variables tuya_state (on/off), internal_state (on/off), tuya_brightness (float), internal_brightness (float)
# when something happens with a device feed current data into variables
# create sensors that watch for changes in state and act accordingly
