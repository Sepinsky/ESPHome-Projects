esphome:
  name: "lego-city"
  friendly_name: Lego City
  on_boot:
    then:
      lambda: |-
        if (id(fm_station_hold).state) {
          id(fm_station_block) = 1;
        }
        if (id(fm_lift_hold).state) {
          id(fm_lift_block) = 1;
        }
        if (id(fm_course_hold).state) {
          id(fm_course_block) = 1;
        }  

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret lego-city-api-key

ota:
  password: !secret lego-city-ota-pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lego-City"
    password: !secret lego-city-ap-pass

captive_portal:

globals:
  #Store block one data for each zone
  - id: fm_station_block
    type: int
    restore_value: no
    initial_value: '0'
  
  - id: fm_lift_block
    type: int
    restore_value: no
    initial_value: '0'

  - id: fm_course_block
    type: int
    restore_value: no
    initial_value: '0'

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

pca9685:
  - id: pca9685_hub1
    address: 0x60
    frequency: 50

  - id: pca9685_hub2
    address: 0x61
    frequency: 50

binary_sensor:
  - platform: template
    name: Station Block
    lambda: 'return (id(fm_station_block) == 1);'

  - platform: template
    name: Lift Block
    lambda: 'return (id(fm_lift_block) == 1);'

  - platform: template
    name: Course Block
    lambda: 'return (id(fm_course_block) == 1);'

  - platform: gpio
    name: Station Hold
    id: fm_station_hold
    pin: 
      number: GPIO27
      mode:
        input: True
        pullup: True
      inverted: True
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - lambda: id(fm_station_block) = 1;
        - if:
            condition:
              lambda: 'return (id(fm_coaster_master).state);'
            then:
              - delay: 5s
              - while:
                  condition:
                    lambda: 'return (id(fm_lift_block) == 1);'
                  then:
                    delay: 500ms
              - light.turn_on: fm_station_drive
              - if:
                  condition:
                    lambda: 'return (id(fm_course_block) != 1);'
                  then:
                    - light.turn_on: fm_lift_hill_drive
                    - light.turn_on: fm_lift_hold_drive
    on_release:
      then:
        - lambda: id(fm_station_block) = 0;
        - lambda: id(fm_lift_block) = 1;
        - delay: 600ms
        - light.turn_off: fm_station_drive
        
  - platform: gpio
    name: Lift Hold
    id: fm_lift_hold
    pin: 
      number: GPIO13
      mode:
        input: True
        pullup: True
      inverted: True
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - lambda: id(fm_lift_block) = 1;
        - if:
            condition:
              lambda: 'return (id(fm_coaster_master).state);'
            then:
              - while:
                  condition:
                    lambda: 'return (id(fm_course_block) == 1);'
                  then:
                    delay: 500ms
              - light.turn_on: fm_lift_hill_drive
              - light.turn_on: fm_lift_hold_drive
    on_release:
      then:
        - lambda: id(fm_lift_block) = 0;
        - lambda: id(fm_course_block) = 1;
        - delay: 1s
        - light.turn_off: fm_lift_hold_drive

  - platform: gpio
    name: Course Hold
    id: fm_course_hold
    pin: 
      number: GPIO14
      mode:
        input: True
        pullup: True
      inverted: True
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - lambda: id(fm_course_block) = 1;
        - if:
            condition:
              lambda: 'return (id(fm_coaster_master).state);'
            then:
              - if:
                  condition:
                    lambda: 'return (id(fm_station_block) == 1);'
                  then:
                    - light.turn_off: fm_lift_hill_drive
                    - while:
                       condition:
                         lambda: 'return (id(fm_station_block) == 1);'
                       then:
                         delay: 500ms
              - light.turn_on: fm_lift_hill_drive
            else:
              light.turn_off: fm_lift_hill_drive
    on_release:
      then:
        - lambda: id(fm_course_block) = 0;
        - lambda: id(fm_station_block) = 1;
        - if:
            condition:
              lambda: 'return (id(fm_lift_block) != 1);'
            then:
              - delay: 1s
              - light.turn_off: fm_lift_hill_drive

output:
  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor3_speed
    channel: 2

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor3_fw
    channel: 4

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor3_rv
    channel: 3

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor4_speed
    channel: 7

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor4_fw
    channel: 5

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor4_rv
    channel: 6

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor1_speed
    channel: 8

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor1_fw
    channel: 10

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor1_rv
    channel: 9

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor2_speed
    channel: 13

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor2_fw
    channel: 11

  - platform: pca9685
    pca9685_id: 'pca9685_hub1' 
    id: hub1_motor2_rv
    channel: 12

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor3_speed
    channel: 2

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor3_fw
    channel: 4

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor3_rv
    channel: 3

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor4_speed
    channel: 7

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor4_fw
    channel: 5

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor4_rv
    channel: 6

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor1_speed
    channel: 8

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor1_fw
    channel: 10

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor1_rv
    channel: 9

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor2_speed
    channel: 13

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor2_fw
    channel: 11

  - platform: pca9685
    pca9685_id: 'pca9685_hub2' 
    id: hub2_motor2_rv
    channel: 12

light:
  - platform: monochromatic
    name : "Family Coaster Station Drive"
    id: fm_station_drive
    output: hub1_motor1_speed
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - output.set_level:
          id: hub1_motor1_fw
          level: 100%
      - output.set_level:
          id:  hub1_motor1_rv
          level: 0%
    on_turn_off:
      - output.set_level:
          id: hub1_motor1_fw
          level: 0%
      - output.set_level:
          id:  hub1_motor1_rv
          level: 0%
  
  - platform: monochromatic
    name : "Family Coaster Hold Drive"
    id: fm_lift_hold_drive
    output: hub1_motor2_speed
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - output.set_level:
          id: hub1_motor2_fw
          level: 100%
      - output.set_level:
          id:  hub1_motor2_rv
          level: 0%
    on_turn_off:
      - output.set_level:
          id: hub1_motor2_fw
          level: 0%
      - output.set_level:
          id:  hub1_motor2_rv
          level: 0%

  - platform: monochromatic
    name: "Family Coaster Lift Hill Drive"
    id: fm_lift_hill_drive
    output: hub1_motor3_speed
    default_transition_length: 0s
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - output.set_level:
          id: hub1_motor3_fw
          level: 100%
      - output.set_level:
          id:  hub1_motor3_rv
          level: 0%
    on_turn_off:
      - output.set_level:
          id: hub1_motor3_fw
          level: 0%
      - output.set_level:
          id:  hub1_motor3_rv
          level: 0%

  - platform: monochromatic
    name: "Light1"
    output: hub2_motor1_speed
    default_transition_length: 4s
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - output.set_level:
          id: hub2_motor1_fw
          level: 100%
      - output.set_level:
          id:  hub2_motor1_rv
          level: 0%
    on_turn_off:
      - output.set_level:
          id: hub2_motor1_fw
          level: 0%
      - output.set_level:
          id:  hub2_motor1_rv
          level: 0%

switch:
  - platform: restart
    name: Reset Lego City

  # turns on automations for the Family Coaster
  - platform: template
    name: Family Coaster
    id: fm_coaster_master
    optimistic: True
    restore_mode: ALWAYS_OFF
    on_turn_on:
      #add code to reset block zone variables based on current sensor readings
      - if:
          condition:
            lambda: 'return (id(fm_lift_block) != 1);'
          then:
            - light.turn_on: fm_station_drive
            - delay: 600ms
            - light.turn_off: fm_station_drive
      - delay: 1s      
      - if:
          condition:
            lambda: 'return (id(fm_course_block) != 1);'
          then:
            - light.turn_on: fm_lift_hill_drive
            - light.turn_on: fm_lift_hold_drive
      - delay: 1s
      - if:
          condition:
            lambda: 'return (id(fm_station_block) != 1);'
          then:
            light.turn_on: fm_lift_hill_drive
      - delay: 1s
      - if:
          condition:
            lambda: 'return (id(fm_lift_block) != 1);'
          then:
            - light.turn_on: fm_station_drive
            - delay: 600ms
            - light.turn_off: fm_station_drive
      - delay: 1s      
      - if:
          condition:
            lambda: 'return (id(fm_course_block) != 1);'
          then:
            - light.turn_on: fm_lift_hill_drive
            - light.turn_on: fm_lift_hold_drive
      - delay: 1s
      - if:
          condition:
            lambda: 'return (id(fm_station_block) != 1);'
          then:
            light.turn_on: fm_lift_hill_drive
